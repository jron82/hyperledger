// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  role              Role                @default(ADMIN)
  sessions          Session[]
  Invoice           Invoice[]
  Expense           Expense[]
  TaxPayment        TaxPayment[]
  VerificationToken VerificationToken[]
}

model VerificationToken {
  userId  String
  token   String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Invoice {
  id          String    @id @default(cuid())
  userId      String
  amount      Int       @default(0)
  description String    @default("")
  emailSent   Boolean   @default(false)
  invoicedAt  DateTime
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      @default(0)
  description String   @default("")
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TaxPayment {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      @default(0)
  description String   @default("")
  quarter     Quarter
  year        Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  ACCOUNTANT
}

enum Quarter {
  Q1
  Q2
  Q3
  Q4
}
